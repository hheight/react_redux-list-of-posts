{"version":3,"sources":["store/loading.ts","helpers/api.ts","store/error.ts","store/posts.ts","store/query.ts","store/index.ts","components/LoadButton.tsx","components/User.tsx","components/Comment.tsx","components/CommentsList.tsx","components/Post.tsx","helpers/debounce.ts","components/PostsList.tsx","App.tsx","index.tsx"],"names":["inititalState","loading","loaded","reducer","state","action","type","API_URL","getPosts","a","fetch","response","json","getComments","getUsers","fetchPreparedPosts","Promise","all","posts","users","comments","map","post","user","find","currentUser","userId","id","filter","comment","postId","error","commentId","query","rootReducer","combineReducers","loadingStatus","loadingReducer","errorReducer","postsReducer","queryReducer","getIsLoading","getIsLoaded","getError","getQuery","loadPosts","dispatch","fetchedPosts","store","createStore","composeWithDevTools","applyMiddleware","thunk","LoadButton","useDispatch","useSelector","showPosts","className","onClick","disabled","User","name","email","address","href","city","street","suite","Comment","body","deleteComment","CommentsList","currentComment","key","Post","title","deletePost","debounce","f","delay","timer","args","clearTimeout","setTimeout","PostsList","visiblePosts","useMemo","pattern","RegExp","test","handleChange","useCallback","value","setQuery","htmlFor","onChange","e","target","currentPost","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eadc5ae6.chunk.js","sourcesContent":["import { AnyAction } from 'redux';\n\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n\nconst inititalState = { loading: false, loaded: false };\n\nconst reducer = (state = inititalState, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return {\n        ...state,\n        loading: true,\n      }\n\n    case FINISH_LOADING:\n      return {\n        ...state,\n        loading: false,\n        loaded: true,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","const API_URL = 'https://jsonplaceholder.typicode.com';\n\nconst getPosts = async (): Promise<PostFromServer[]> => {\n  const response = await fetch(`${API_URL}/posts`);\n\n  return response.json();\n};\n\nconst getComments = async (): Promise<Comment[]> => {\n  const response = await fetch(`${API_URL}/comments`);\n\n  return response.json();\n};\n\nconst getUsers = async (): Promise<User[]> => {\n  const response = await fetch(`${API_URL}/users`);\n\n  return response.json();\n};\n\nexport const fetchPreparedPosts = async (): Promise<Post[]> => {\n  const [\n    posts,\n    users,\n    comments,\n  ] = await Promise.all([getPosts(), getUsers(), getComments()]);\n\n  return posts.map(post => ({\n    ...post,\n    user: users.find(currentUser => post.userId === currentUser.id) as User,\n    comments: comments.filter(comment => post.id === comment.postId) as Comment[],\n  }));\n};\n","import { AnyAction } from \"redux\";\n\nconst SET_ERROR = 'SET_ERROR';\n\nexport const setError = (error: string) => {\n  return {\n    type: SET_ERROR,\n    error\n  }\n};\n\nconst reducer = (error = '', action: AnyAction) => {\n  switch (action.type) {\n    case SET_ERROR:\n      return action.error;\n\n    default:\n      return error;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from \"redux\";\n\nconst SET_POSTS = 'SET_POSTS';\nconst DELETE_POST = 'DELETE_POST';\nconst DELETE_COMMENT = 'DELETE_COMMENT';\n\nexport const setPosts = (posts: Post[]) => {\n  return {\n    type: SET_POSTS,\n    posts\n  }\n}\n\nexport const deletePost = (id: number) => ({\n  type: DELETE_POST,\n  id\n});\n\nexport const deleteComment = (postId: number, commentId: number) => ({\n  type: DELETE_COMMENT,\n  postId,\n  commentId\n});\n\nconst reducer = (posts: Post[] = [], action: AnyAction) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return action.posts;\n\n    case DELETE_POST:\n      return posts.filter(post => post.id !== action.id);\n\n    case DELETE_COMMENT:\n      return posts.map(post => (\n        post.id === action.postId\n          ? {\n            ...post,\n            comments: post.comments\n              .filter(comment => comment.id !== action.commentId)\n          } : post));\n\n    default:\n      return posts;\n  }\n}\n\nexport default reducer;\n","import { AnyAction } from \"redux\";\n\nconst SET_QUERY = 'SET_QUERY';\n\nexport const setQuery = (query: string) => ({\n  type: SET_QUERY,\n  query\n});\n\nconst reducer = (query = '', action: AnyAction) => {\n  switch (action.type) {\n    case SET_QUERY:\n      return action.query\n\n    default:\n      return query;\n  }\n}\n\nexport default reducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Dispatch } from 'react';\n\nimport loadingReducer, { finishLoading, startLoading } from './loading';\nimport { fetchPreparedPosts } from '../helpers/api';\nimport errorReducer, { setError } from './error';\nimport postsReducer, { setPosts } from './posts';\nimport queryReducer from './query';\n\n/**\n * Each concrete reducer will receive all the actions but only its part of the state\n *\n * const rootReducer = (state = {}, action) => ({\n *   loading: loadingReducer(state.loading, action),\n *   message: messageReducer(state.message, action),\n * })\n */\nconst rootReducer = combineReducers({\n  loadingStatus: loadingReducer,\n  error: errorReducer,\n  posts: postsReducer,\n  query: queryReducer,\n});\n\n// We automatically get types returned by concrete reducers\nexport type RootState = ReturnType<typeof rootReducer>;\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const getIsLoading = (state: RootState) => state.loadingStatus.loading;\nexport const getIsLoaded = (state: RootState) => state.loadingStatus.loaded;\nexport const getError = (state: RootState) => state.error;\nexport const getPosts = (state: RootState) => state.posts;\nexport const getQuery = (state: RootState) => state.query;\n\n/**\n * Thunk - is a function that should be used as a normal action creator\n *\n * dispatch(loadMessage())\n */\nexport const loadPosts = () => {\n  // inner function is an action handled by Redux Thunk\n  return async (dispatch: Dispatch<any>) => {\n    dispatch(startLoading());\n\n    try {\n      const fetchedPosts = await fetchPreparedPosts();\n      dispatch(setPosts(fetchedPosts));\n\n    } catch (error) {\n      dispatch(setError('Error occurred when loading data'));\n    }\n\n    dispatch(finishLoading());\n  };\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { loadPosts, getIsLoading } from '../store/'\n\nexport const LoadButton = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(getIsLoading);\n  const showPosts = useSelector(loadPosts);\n\n  return (\n    <button\n      type=\"button\"\n      className=\"btn btn-primary btn-lg mb-2\"\n      onClick={() => showPosts(dispatch)}\n      disabled={loading}\n    >\n      {loading ? 'Loading...' : 'Load posts'}\n    </button>\n  )\n}\n","import React from 'react'\n\nexport const User = ({ name, email, address }: User) => {\n  return (\n    <div className=\"post__user user\">\n    <p className=\"user__name\">\n      {name}\n    </p>\n    <a href={`mailto:${email}`} className=\"user__email\">\n      {email}\n    </a>\n    <address className=\"user__address\">\n      <span>\n        {`${address.city}, ${address.street}, ${address.suite}`}\n      </span>\n    </address>\n  </div>\n  )\n}\n","import React from 'react'\nimport { deleteComment } from '../store/posts';\nimport { useDispatch } from 'react-redux';\n\nexport const Comment = ({ name, body, email, id, postId }: Comment) => {\n  const dispatch = useDispatch();\n\n  return (\n    <li className=\"post__comment comment\">\n      <p className=\"comment__name\">\n        {name}\n      </p>\n      <p className=\"comment__body\">\n        {body}\n      </p>\n      <a href={`mailto:${email}`} className=\"comment__email\">\n        {email}\n      </a>\n      <button\n        onClick={() => dispatch(deleteComment(postId, id))}\n        type=\"button\"\n        className=\"comment__delete-comment-btn btn-floating cyan\"\n      >\n        X\n      </button>\n    </li>\n  )\n}\n","import React from 'react';\nimport { Comment } from './Comment';\n\ntype CommentsProps = Comments & {\n  postId: number;\n}\n\nexport const CommentsList = ({ comments, postId }: CommentsProps) => {\n  return (\n    <ul className=\"post__comments\">\n      {comments.map(currentComment => (\n        <Comment\n          {...currentComment}\n          key={currentComment.id}\n          postId={postId}\n        />\n      ))}\n    </ul>\n  )\n}\n","import React from 'react';\nimport { User } from './User';\nimport { CommentsList } from './CommentsList';\nimport { deletePost } from '../store/posts';\nimport { useDispatch } from 'react-redux';\n\nexport const Post = ({\n  title,\n  body,\n  user,\n  comments,\n  id,\n}: Post) => {\n  const dispatch = useDispatch();\n  return (\n    <article className=\"post\">\n      <h2 className=\"post__title\">\n        {title}\n      </h2>\n      <p className=\"post__body\">\n        {body}\n      </p>\n      <User {...user} />\n      <h6>Comments:</h6>\n      <button\n        type=\"button\"\n        onClick={() => dispatch(deletePost(id))}\n        className=\"post__delete-btn btn-floating red btn-small\"\n      >\n        <i className=\"material-icons\">delete</i>\n      </button>\n      <CommentsList comments={comments} postId={id}/>\n    </article>\n  )\n};\n","function debounce<Params extends any[]>(\n  f: (...args: Params) => any,\n  delay: number,\n): (...args: Params) => void {\n  let timer: NodeJS.Timeout;\n\n  return (...args: Params) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      f(...args);\n    }, delay);\n  };\n}\n\nexport default debounce;\n","import React, { useMemo, useCallback } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { getPosts, getQuery } from '../store'\nimport { Post } from './Post'\nimport debounce from '../helpers/debounce'\nimport { setQuery } from '../store/query'\n\nexport const PostsList = () => {\n  const dispatch = useDispatch();\n  const query = useSelector(getQuery);\n  const posts = useSelector(getPosts);\n\n  const visiblePosts = useMemo(() => {\n    const pattern = new RegExp(query, 'i');\n\n    return posts.filter(({ body, title }: Post) => pattern.test(body + title));\n  }, [posts, query]);\n\n  const handleChange = useCallback(\n    debounce((value: string) => {\n      dispatch(setQuery(value));\n    }, 1000),\n    [],\n  );\n\n  return (\n    <>\n    <div className=\"row\">\n      <div className=\"input-field col s6 offset-s3\">\n        <label htmlFor=\"search\">\n          Search for posts\n          <input\n            id=\"search\"\n            type=\"text\"\n            className=\"validate\"\n            onChange={(e) => handleChange(e.target.value)}\n          />\n        </label>\n      </div>\n    </div>\n    <div className=\"row\">\n      <div className=\"posts\">\n        {visiblePosts.map((currentPost: Post) => (\n          <Post {...currentPost} key={currentPost.id} />\n        ))}\n      </div>\n    </div>\n  </>\n  )\n}\n","import React from 'react';\nimport './App.scss';\nimport { LoadButton } from './components/LoadButton';\nimport { PostsList } from './components/PostsList';\nimport { useSelector } from 'react-redux';\nimport { getError, getIsLoaded } from './store';\n\nconst App = () => {\n  const loaded = useSelector(getIsLoaded);\n  const error = useSelector(getError);\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"row center-align\">Dynamic list of Posts</h1>\n        {(loaded && !error) ? (\n          <div className=\"row\">\n            <div className=\"col s12\">\n              <PostsList />\n            </div>\n          </div>\n        ) : (\n          <div className=\"row center-align\">\n            <LoadButton />\n            <p>{error}</p>\n          </div>\n        )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}